//--------------------------------------------------------------------------------
// Auto-generated by Migen (41922fd) & LiteX (b6d35c92) on 2020-02-14 03:01:05
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_writeb(uint8_t value, unsigned long addr);
extern uint8_t csr_readb(unsigned long addr);
extern void csr_writew(uint16_t value, unsigned long addr);
extern uint16_t csr_readw(unsigned long addr);
extern void csr_writel(uint32_t value, unsigned long addr);
extern uint32_t csr_readl(unsigned long addr);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* cam */
#define CSR_CAM_BASE 0x82001800L
#define CSR_CAM_INIT_ADDR 0x82001800L
#define CSR_CAM_INIT_SIZE 1
static inline unsigned int cam_init_read(void) {
	unsigned int r = csr_readl(0x82001800L);
	return r;
}
static inline void cam_init_write(unsigned int value) {
	csr_writel(value, 0x82001800L);
}
#define CSR_CAM_DONE_ADDR 0x82001804L
#define CSR_CAM_DONE_SIZE 1
static inline unsigned int cam_done_read(void) {
	unsigned int r = csr_readl(0x82001804L);
	return r;
}
#define CSR_CAM_RESULT_ADDR 0x82001808L
#define CSR_CAM_RESULT_SIZE 1
static inline unsigned int cam_result_read(void) {
	unsigned int r = csr_readl(0x82001808L);
	return r;
}

/* ctrl */
#define CSR_CTRL_BASE 0x82000000L
#define CSR_CTRL_RESET_ADDR 0x82000000L
#define CSR_CTRL_RESET_SIZE 1
static inline unsigned int ctrl_reset_read(void) {
	unsigned int r = csr_readl(0x82000000L);
	return r;
}
static inline void ctrl_reset_write(unsigned int value) {
	csr_writel(value, 0x82000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0x82000004L
#define CSR_CTRL_SCRATCH_SIZE 1
static inline unsigned int ctrl_scratch_read(void) {
	unsigned int r = csr_readl(0x82000004L);
	return r;
}
static inline void ctrl_scratch_write(unsigned int value) {
	csr_writel(value, 0x82000004L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0x82000008L
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline unsigned int ctrl_bus_errors_read(void) {
	unsigned int r = csr_readl(0x82000008L);
	return r;
}

/* timer0 */
#define CSR_TIMER0_BASE 0x82003000L
#define CSR_TIMER0_LOAD_ADDR 0x82003000L
#define CSR_TIMER0_LOAD_SIZE 1
static inline unsigned int timer0_load_read(void) {
	unsigned int r = csr_readl(0x82003000L);
	return r;
}
static inline void timer0_load_write(unsigned int value) {
	csr_writel(value, 0x82003000L);
}
#define CSR_TIMER0_RELOAD_ADDR 0x82003004L
#define CSR_TIMER0_RELOAD_SIZE 1
static inline unsigned int timer0_reload_read(void) {
	unsigned int r = csr_readl(0x82003004L);
	return r;
}
static inline void timer0_reload_write(unsigned int value) {
	csr_writel(value, 0x82003004L);
}
#define CSR_TIMER0_EN_ADDR 0x82003008L
#define CSR_TIMER0_EN_SIZE 1
static inline unsigned int timer0_en_read(void) {
	unsigned int r = csr_readl(0x82003008L);
	return r;
}
static inline void timer0_en_write(unsigned int value) {
	csr_writel(value, 0x82003008L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0x8200300cL
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline unsigned int timer0_update_value_read(void) {
	unsigned int r = csr_readl(0x8200300cL);
	return r;
}
static inline void timer0_update_value_write(unsigned int value) {
	csr_writel(value, 0x8200300cL);
}
#define CSR_TIMER0_VALUE_ADDR 0x82003010L
#define CSR_TIMER0_VALUE_SIZE 1
static inline unsigned int timer0_value_read(void) {
	unsigned int r = csr_readl(0x82003010L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0x82003014L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline unsigned int timer0_ev_status_read(void) {
	unsigned int r = csr_readl(0x82003014L);
	return r;
}
static inline void timer0_ev_status_write(unsigned int value) {
	csr_writel(value, 0x82003014L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0x82003018L
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline unsigned int timer0_ev_pending_read(void) {
	unsigned int r = csr_readl(0x82003018L);
	return r;
}
static inline void timer0_ev_pending_write(unsigned int value) {
	csr_writel(value, 0x82003018L);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0x8200301cL
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline unsigned int timer0_ev_enable_read(void) {
	unsigned int r = csr_readl(0x8200301cL);
	return r;
}
static inline void timer0_ev_enable_write(unsigned int value) {
	csr_writel(value, 0x8200301cL);
}

/* uart */
#define CSR_UART_BASE 0x82002000L
#define CSR_UART_RXTX_ADDR 0x82002000L
#define CSR_UART_RXTX_SIZE 1
static inline unsigned int uart_rxtx_read(void) {
	unsigned int r = csr_readl(0x82002000L);
	return r;
}
static inline void uart_rxtx_write(unsigned int value) {
	csr_writel(value, 0x82002000L);
}
#define CSR_UART_TXFULL_ADDR 0x82002004L
#define CSR_UART_TXFULL_SIZE 1
static inline unsigned int uart_txfull_read(void) {
	unsigned int r = csr_readl(0x82002004L);
	return r;
}
#define CSR_UART_RXEMPTY_ADDR 0x82002008L
#define CSR_UART_RXEMPTY_SIZE 1
static inline unsigned int uart_rxempty_read(void) {
	unsigned int r = csr_readl(0x82002008L);
	return r;
}
#define CSR_UART_EV_STATUS_ADDR 0x8200200cL
#define CSR_UART_EV_STATUS_SIZE 1
static inline unsigned int uart_ev_status_read(void) {
	unsigned int r = csr_readl(0x8200200cL);
	return r;
}
static inline void uart_ev_status_write(unsigned int value) {
	csr_writel(value, 0x8200200cL);
}
#define CSR_UART_EV_PENDING_ADDR 0x82002010L
#define CSR_UART_EV_PENDING_SIZE 1
static inline unsigned int uart_ev_pending_read(void) {
	unsigned int r = csr_readl(0x82002010L);
	return r;
}
static inline void uart_ev_pending_write(unsigned int value) {
	csr_writel(value, 0x82002010L);
}
#define CSR_UART_EV_ENABLE_ADDR 0x82002014L
#define CSR_UART_EV_ENABLE_SIZE 1
static inline unsigned int uart_ev_enable_read(void) {
	unsigned int r = csr_readl(0x82002014L);
	return r;
}
static inline void uart_ev_enable_write(unsigned int value) {
	csr_writel(value, 0x82002014L);
}

/* uart_phy */
#define CSR_UART_PHY_BASE 0x82001000L
#define CSR_UART_PHY_TUNING_WORD_ADDR 0x82001000L
#define CSR_UART_PHY_TUNING_WORD_SIZE 1
static inline unsigned int uart_phy_tuning_word_read(void) {
	unsigned int r = csr_readl(0x82001000L);
	return r;
}
static inline void uart_phy_tuning_word_write(unsigned int value) {
	csr_writel(value, 0x82001000L);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE 0x82002800L

#endif
